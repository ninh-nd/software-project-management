import { AddOutlined } from "@mui/icons-material";
import { Box, Button, Dialog, Divider, TextField } from "@mui/material";
import {
  DataGrid,
  GridColDef,
  GridToolbarContainer,
  GridToolbarQuickFilter,
} from "@mui/x-data-grid";
import { useThemeHook } from "~/hooks/theme";
import * as React from "react";
import { getCVE } from "~/actions/cveAction";
import { useForm } from "react-hook-form";
function EditToolbar({ setOpen }: { setOpen: (open: boolean) => void }) {
  const addRecord = () => {
    setOpen(true);
  };
  return (
    <GridToolbarContainer sx={{ justifyContent: "space-between" }}>
      <Button color="primary" startIcon={<AddOutlined />} onClick={addRecord}>
        Add record
      </Button>
      <GridToolbarQuickFilter />
    </GridToolbarContainer>
  );
}

function AddVulDialog({
  open,
  setOpen,
}: {
  open: boolean;
  setOpen: (open: boolean) => void;
}) {
  const { register, handleSubmit } = useForm<{ cveId: string }>();
  const [error, setError] = React.useState(false);
  const [errorText, setErrorText] = React.useState("");
  const [cve, setCve] = React.useState({
    product: "",
    version: "",
    vendor: "",
    score: 0,
    cweId: "",
  });
  const { product, version, vendor, score, cweId } = cve;
  const searchCve = async ({ cveId }: { cveId: string }) => {
    const { data } = await getCVE(cveId);
    if (data === null) {
      setError(true);
      setErrorText("CVE-ID not found");
      return;
    } else {
      setError(false);
      setErrorText("");
    }
    const { product, version, vendor, score, cwes } = data;
    const versionAsString = version.join(", ");
    const cweIdAsString = cwes.join(", ");
    setCve({
      product,
      version: versionAsString,
      vendor,
      score,
      cweId: cweIdAsString,
    });
  };
  return (
    <Dialog open={open} onClose={() => setOpen(false)}>
      <Box sx={{ p: 2, height: "50vh", width: "35vw" }}>
        <Box
          sx={{ display: "flex", justifyContent: "space-between" }}
          component="form"
          onSubmit={handleSubmit(searchCve)}
        >
          <TextField
            margin="normal"
            required
            autoFocus
            label="CVE-ID"
            variant="standard"
            {...register("cveId")}
            error={error}
            helperText={errorText}
          />
          <Button
            variant="contained"
            color="primary"
            sx={{ mt: "16px", mb: "8px" }}
            type="submit"
          >
            Search CVE
          </Button>
        </Box>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            flexWrap: "wrap",
          }}
        >
          <TextField
            margin="normal"
            label="Product"
            variant="standard"
            disabled
            value={product}
          />
          <TextField
            margin="normal"
            label="Version"
            variant="standard"
            disabled
            value={version}
          />
          <TextField
            margin="normal"
            label="Vendor"
            variant="standard"
            disabled
            value={vendor}
          />
          <TextField
            margin="normal"
            label="Score"
            variant="standard"
            disabled
            value={score}
          />
          <TextField
            margin="normal"
            label="CWE-ID"
            variant="standard"
            disabled
            value={cweId}
          />
        </Box>
        <Box sx={{ display: "flex", justifyContent: "center" }}>
          <Button variant="contained" color="primary" sx={{ m: 2 }}>
            Import this CVE
          </Button>
        </Box>
        <Divider>OR</Divider>
      </Box>
    </Dialog>
  );
}

export default function VulnerabilityPage() {
  const [open, setOpen] = React.useState(false);
  const columns: GridColDef[] = [
    { field: "cveId", headerName: "CVE-ID", flex: 1 },
    { field: "product", headerName: "Product", flex: 1 },
    { field: "version", headerName: "Version", flex: 1 },
    { field: "vendor", headerName: "Vendor", flex: 1 },
    { field: "score", headerName: "Score", flex: 1 },
    {
      field: "severity",
      headerName: "Severity",
      flex: 1,
      renderCell: (params) => (
        <Box
          sx={{
            color:
              params.value === "High"
                ? "error.main"
                : params.value === "Medium"
                ? "warning.main"
                : "success.main",
          }}
        >
          {params.value}
        </Box>
      ),
    },
    { field: "cweId", headerName: "CWE-ID", flex: 1 },
  ];
  const rows = [
    {
      cveId: "CVE-2021-0001",
      product: "Product 1",
      version: "1.0.0",
      vendor: "Vendor 1",
      score: "7.5",
      severity: "Low",
      cweId: "CWE-123",
    },
    {
      cveId: "CVE-2021-0002",
      product: "Product 2",
      version: "1.0.0",
      vendor: "Vendor 2",
      score: "7.5",
      severity: "High",
      cweId: "CWE-123",
    },
    {
      cveId: "CVE-2021-0003",
      product: "Product 3",
      version: "1.0.0",
      vendor: "Vendor 3",
      score: "7.5",
      severity: "Medium",
      cweId: "CWE-123",
    },
  ];
  return (
    <Box sx={{ height: 500, width: "100%" }}>
      <DataGrid
        columns={columns}
        rows={rows}
        disableColumnFilter
        disableColumnSelector
        disableDensitySelector
        components={{
          Toolbar: EditToolbar,
        }}
        componentsProps={{
          toolbar: {
            showQuickFilter: true,
            quickFilterProps: { debounceMs: 500 },
            setOpen: setOpen,
          },
        }}
        getRowId={(row) => row.cveId}
      />
      <AddVulDialog open={open} setOpen={setOpen} />
    </Box>
  );
}
