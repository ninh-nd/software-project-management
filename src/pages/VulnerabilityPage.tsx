import { AddOutlined } from "@mui/icons-material";
import {
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  Container,
  Dialog,
  Grid,
  Link,
  Slide,
  useMediaQuery,
} from "@mui/material";
import { TransitionProps } from "@mui/material/transitions";
import {
  DataGrid,
  GridColDef,
  GridToolbar,
  GridToolbarContainer,
  GridToolbarQuickFilter,
} from "@mui/x-data-grid";
import { forwardRef, useState } from "react";
import { Link as RouterLink, useParams } from "react-router-dom";
import CWEDetails from "~/components/vulnerabilities/dialog/CWEDetails";
import SeverityStatistics from "~/components/vulnerabilities/featuredInfo/SeverityStatistics";
import TotalThreats from "~/components/vulnerabilities/featuredInfo/TotalThreats";
import TotalVulnerabilities from "~/components/vulnerabilities/featuredInfo/TotalVulnerabilities";
import { useArtifactsQuery } from "~/hooks/query";
import { useCustomTheme } from "~/hooks/theme";
const Transition = forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>
) {
  return <Slide direction="left" ref={ref} {...props} />;
});
function EditToolbar({ setOpen }: { setOpen: (open: boolean) => void }) {
  const addRecord = () => {
    setOpen(true);
  };
  return (
    <GridToolbarContainer sx={{ justifyContent: "space-between" }}>
      <Button color="primary" startIcon={<AddOutlined />} onClick={addRecord}>
        Add record
      </Button>
      <GridToolbarQuickFilter />
    </GridToolbarContainer>
  );
}

export default function VulnerabilityPage() {
  const { currentProject } = useParams();
  if (!currentProject) return <></>;
  const theme = useCustomTheme();
  const lessThanSmall = useMediaQuery(theme.breakpoints.down("sm"));
  const [openAddThreat, setOpenAddThreat] = useState(false);
  const [openCWEDetailsDialog, setOpenCWEDetailsDialog] = useState(false);
  const threatColumns: GridColDef[] = [
    { field: "name", headerName: "Name", flex: lessThanSmall ? 2 : 1 },
    { field: "description", headerName: "Description", flex: 3 },
  ];
  const vulnColumns: GridColDef[] = [
    { field: "cveId", headerName: "CVE-ID", flex: lessThanSmall ? 2 : 1 },
    { field: "score", headerName: "Score" },
    {
      field: "severity",
      headerName: "Severity",
      renderCell: (params) => (
        <Box
          sx={{
            color:
              params.value === "HIGH"
                ? "error.main"
                : params.value === "MEDIUM"
                ? "warning.main"
                : "success.main",
          }}
        >
          {params.value}
        </Box>
      ),
    },
    { field: "availabilityImpact", headerName: "Availability Impact" },
    { field: "confidentialityImpact", headerName: "Confidentiality Impact" },
    { field: "integrityImpact", headerName: "Integrity Impact" },
    {
      field: "cwes",
      headerName: "CWE-ID",
      flex: 1,
      renderCell: (params) => (
        <Link
          to={`?cwe=${params.value}`}
          onClick={() => setOpenCWEDetailsDialog(true)}
          component={RouterLink}
        >
          {params.value}
        </Link>
      ),
    },
  ];
  const getAllArtifactsQuery = useArtifactsQuery(currentProject);
  const artifacts = getAllArtifactsQuery.data?.data;
  if (!artifacts) return <></>;
  const vulns = artifacts.flatMap((artifact) => artifact.vulnerabilityList);
  const threats = artifacts.flatMap((artifact) => artifact.threatList);
  return (
    <Box sx={{ flexGrow: 1, height: "100vh" }}>
      <Container sx={{ mt: 4, mb: 4 }}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6} lg={3}>
            <TotalVulnerabilities total={vulns.length} />
          </Grid>
          <Grid item xs={12} md={6} lg={3}>
            <TotalThreats total={threats.length} />
          </Grid>
          <Grid item xs={12} md={12} lg={6}>
            <SeverityStatistics vulnList={vulns} />
          </Grid>
          <Grid item xs={12}>
            <Card>
              <CardHeader title="Vulnerabilities" />
              <CardContent>
                <DataGrid
                  autoHeight
                  columns={vulnColumns}
                  rows={vulns}
                  disableColumnFilter
                  disableColumnSelector
                  disableDensitySelector
                  getRowId={(row) => row.cveId}
                  initialState={{
                    pagination: {
                      paginationModel: { pageSize: 5, page: 0 },
                    },
                  }}
                  pageSizeOptions={[5, 10]}
                  slots={{ toolbar: GridToolbar }}
                  slotProps={{
                    toolbar: {
                      showQuickFilter: true,
                      quickFilterProps: { debounceMs: 500 },
                    },
                  }}
                />
              </CardContent>
            </Card>
          </Grid>
          {/* <Grid item xs={12}>
            <Card>
              <CardHeader title="Threats" />
              <CardContent>
                <DataGrid
                  autoHeight
                  columns={threatColumns}
                  rows={threats}
                  disableColumnFilter
                  disableColumnSelector
                  disableDensitySelector
                  components={{
                    Toolbar: EditToolbar,
                  }}
                  componentsProps={{
                    toolbar: {
                      showQuickFilter: true,
                      quickFilterProps: { debounceMs: 500 },
                      setOpen: setOpenAddThreat,
                    },
                  }}
                  getRowId={(row) => row._id}
                />
                <AddThreatDialog
                  open={openAddThreat}
                  setOpen={setOpenAddThreat}
                />
              </CardContent>
            </Card>
          </Grid> */}
        </Grid>
      </Container>
      <Dialog
        open={openCWEDetailsDialog}
        onClose={() => setOpenCWEDetailsDialog(false)}
        fullScreen
        TransitionComponent={Transition}
      >
        <CWEDetails setCloseDialog={() => setOpenCWEDetailsDialog(false)} />
      </Dialog>
    </Box>
  );
}
