import {
  Box,
  Container,
  Dialog,
  Grid,
  Slide,
  Toolbar,
  useTheme,
} from "@mui/material";
import { TransitionProps } from "@mui/material/transitions";
import { GridRowId } from "@mui/x-data-grid";
import { forwardRef, useState } from "react";
import { useParams } from "react-router-dom";
import ArtifactCard from "~/components/cards/ArtifactCard";
import TotalThreats from "~/components/cards/TotalThreatsCard";
import TotalVulnerabilities from "~/components/cards/TotalVulnerabilitiesCard";
import SeverityStatistics from "~/components/charts/SeverityStatisticsChart";
import ThreatStatistics from "~/components/charts/ThreatStatisticsChart";
import CWEDetails from "~/components/dialogs/CWEDetailsDialog";
import ThreatDetails from "~/components/dialogs/ThreatDetailsDialog";
import { useArtifactsQuery } from "~/hooks/query";
import VulnResolveProgressCard from "~/components/cards/VulnResolveProgressCard";
const Transition = forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>
) {
  return <Slide direction="left" ref={ref} {...props} />;
});

export default function Vulnerability() {
  const { currentProject } = useParams();
  const theme = useTheme();
  const [openAddThreat, setOpenAddThreat] = useState(false);
  const [openCWEDetailsDialog, setOpenCWEDetailsDialog] = useState(false);
  const [openThreatDetailsDialog, setOpenThreatDetailsDialog] = useState(false);
  const [selectedThreat, setSelectedThreat] = useState<string | undefined>(
    undefined
  );
  const getAllArtifactsQuery = useArtifactsQuery(currentProject);
  const artifacts = getAllArtifactsQuery.data?.data;
  if (!artifacts) return <></>;
  const vulns = artifacts.flatMap((artifact) => artifact.vulnerabilityList);
  const threats = artifacts.flatMap((artifact) => artifact.threatList);
  function handleInfoClick(id: GridRowId) {
    return () => {
      setSelectedThreat(id as string);
      setOpenThreatDetailsDialog(true);
    };
  }
  return (
    <Box sx={{ flexGrow: 1, height: "100vh" }}>
      <Toolbar />
      <Container maxWidth="lg" sx={{ my: 4 }}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6} lg={4}>
            <TotalVulnerabilities
              total={vulns.length}
              sx={{ height: "100%" }}
            />
          </Grid>
          <Grid item xs={12} md={6} lg={3}>
            <TotalThreats total={threats.length} sx={{ height: "100%" }} />
          </Grid>
          <Grid item lg={5}>
            <VulnResolveProgressCard value={50} />
          </Grid>
          <Grid item xs={12} md={12} lg={6}>
            <SeverityStatistics vulnList={vulns} sx={{ height: 400 }} />
          </Grid>
          <Grid item xs={12} md={12} lg={6}>
            <ThreatStatistics threatList={threats} sx={{ height: 400 }} />
          </Grid>
          <Grid item xs={12}>
            <ArtifactCard
              artifacts={artifacts}
              setOpenCWEDetails={setOpenCWEDetailsDialog}
            />
          </Grid>
        </Grid>
      </Container>
      <Dialog
        open={openCWEDetailsDialog}
        onClose={() => setOpenCWEDetailsDialog(false)}
        fullScreen
        TransitionComponent={Transition}
      >
        <CWEDetails setCloseDialog={() => setOpenCWEDetailsDialog(false)} />
      </Dialog>
      <Dialog
        open={openThreatDetailsDialog}
        onClose={() => setOpenThreatDetailsDialog(false)}
        fullScreen
        TransitionComponent={Transition}
      >
        <ThreatDetails
          id={selectedThreat}
          setCloseDialog={() => setOpenThreatDetailsDialog(false)}
        />
      </Dialog>
    </Box>
  );
}
