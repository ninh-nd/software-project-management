import { AddOutlined, Info } from "@mui/icons-material";
import {
  Box,
  Button,
  Container,
  Dialog,
  Grid,
  Link,
  Slide,
  Tooltip,
  useMediaQuery,
} from "@mui/material";
import { TransitionProps } from "@mui/material/transitions";
import {
  GridActionsCellItem,
  GridColDef,
  GridRowId,
  GridToolbarContainer,
  GridToolbarQuickFilter,
} from "@mui/x-data-grid";
import { forwardRef, useState } from "react";
import { Link as RouterLink, useParams } from "react-router-dom";
import ArtifactCard from "~/components/common/vulnPage/cards/ArtifactCard";
import TotalThreats from "~/components/common/vulnPage/cards/TotalThreats";
import TotalVulnerabilities from "~/components/common/vulnPage/cards/TotalVulnerabilities";
import SeverityStatistics from "~/components/common/vulnPage/charts/SeverityStatistics";
import ThreatStatistics from "~/components/common/vulnPage/charts/ThreatStatistics";
import CWEDetails from "~/components/common/vulnPage/forms/CWEDetails";
import ThreatDetails from "~/components/common/vulnPage/forms/ThreatDetails";
import { useArtifactsQuery } from "~/hooks/query";
import { useCustomTheme } from "~/hooks/theme";
const Transition = forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement;
  },
  ref: React.Ref<unknown>
) {
  return <Slide direction="left" ref={ref} {...props} />;
});
function EditToolbar({ setOpen }: { setOpen: (open: boolean) => void }) {
  const addRecord = () => {
    setOpen(true);
  };
  return (
    <GridToolbarContainer sx={{ justifyContent: "space-between" }}>
      <Button color="primary" startIcon={<AddOutlined />} onClick={addRecord}>
        Register a new threat
      </Button>
      <GridToolbarQuickFilter />
    </GridToolbarContainer>
  );
}

export default function Vulnerability() {
  const { currentProject } = useParams();
  if (!currentProject) return <></>;
  const theme = useCustomTheme();
  const lessThanSmall = useMediaQuery(theme.breakpoints.down("sm"));
  const [openAddThreat, setOpenAddThreat] = useState(false);
  const [openCWEDetailsDialog, setOpenCWEDetailsDialog] = useState(false);
  const [openThreatDetailsDialog, setOpenThreatDetailsDialog] = useState(false);
  const [selectedThreat, setSelectedThreat] = useState<string | undefined>(
    undefined
  );
  const threatColumns: GridColDef[] = [
    { field: "name", headerName: "Name", flex: lessThanSmall ? 2 : 1 },
    { field: "description", headerName: "Description", flex: 1 },
    { field: "type", headerName: "Type" },
    {
      field: "score",
      headerName: "Score",
      valueGetter: (params) => params.row.score.total.toFixed(1),
    },
    { field: "status", headerName: "Status" },
    {
      field: "actions",
      headerName: "Actions",
      type: "actions",
      renderCell: ({ id }) => (
        <GridActionsCellItem
          label="Details"
          icon={
            <Tooltip title="Details">
              <Info />
            </Tooltip>
          }
          onClick={handleInfoClick(id)}
        />
      ),
    },
  ];
  const vulnColumns: GridColDef[] = [
    { field: "cveId", headerName: "CVE-ID", flex: lessThanSmall ? 2 : 1 },
    { field: "score", headerName: "Score" },
    {
      field: "severity",
      headerName: "Severity",
      renderCell: (params) => (
        <Box
          sx={{
            color:
              params.value === "HIGH"
                ? "error.main"
                : params.value === "MEDIUM"
                ? "warning.main"
                : "success.main",
          }}
        >
          {params.value}
        </Box>
      ),
    },
    { field: "availabilityImpact", headerName: "Availability Impact" },
    { field: "confidentialityImpact", headerName: "Confidentiality Impact" },
    { field: "integrityImpact", headerName: "Integrity Impact" },
    {
      field: "cwes",
      headerName: "CWE-ID",
      flex: 1,
      renderCell: (params) => (
        <Link
          to={`?cwe=${params.value}`}
          onClick={() => setOpenCWEDetailsDialog(true)}
          component={RouterLink}
        >
          {params.value}
        </Link>
      ),
    },
  ];
  const getAllArtifactsQuery = useArtifactsQuery(currentProject);
  const artifacts = getAllArtifactsQuery.data?.data;
  if (!artifacts) return <></>;
  const vulns = artifacts.flatMap((artifact) => artifact.vulnerabilityList);
  const threats = artifacts.flatMap((artifact) => artifact.threatList);
  function handleInfoClick(id: GridRowId) {
    return () => {
      setSelectedThreat(id as string);
      setOpenThreatDetailsDialog(true);
    };
  }
  return (
    <Box sx={{ flexGrow: 1, height: "100vh" }}>
      <Container>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6} lg={4}>
            <TotalVulnerabilities total={vulns.length} />
          </Grid>
          <Grid item xs={12} md={6} lg={3}>
            <TotalThreats total={threats.length} />
          </Grid>
          <Grid item xs={12} md={12} lg={6}>
            <SeverityStatistics vulnList={vulns} />
          </Grid>
          <Grid item xs={12} md={12} lg={6}>
            <ThreatStatistics threatList={threats} />
          </Grid>
          <Grid item xs={12}>
            <ArtifactCard artifacts={artifacts} />
          </Grid>
        </Grid>
      </Container>
      <Dialog
        open={openCWEDetailsDialog}
        onClose={() => setOpenCWEDetailsDialog(false)}
        fullScreen
        TransitionComponent={Transition}
      >
        <CWEDetails setCloseDialog={() => setOpenCWEDetailsDialog(false)} />
      </Dialog>
      <Dialog
        open={openThreatDetailsDialog}
        onClose={() => setOpenThreatDetailsDialog(false)}
        fullScreen
        TransitionComponent={Transition}
      >
        <ThreatDetails
          id={selectedThreat}
          setCloseDialog={() => setOpenThreatDetailsDialog(false)}
        />
      </Dialog>
    </Box>
  );
}
